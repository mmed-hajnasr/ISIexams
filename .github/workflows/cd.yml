name: CD # Continuous Deployment

on:
  push:
    tags:
      - "[v]?[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  build:
    name: Build Windows Executables
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10']
        architecture: ['x64']  # Focus on x64 only for better OR-Tools compatibility

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}

    - name: Install system dependencies
      shell: powershell
      run: |
        # Install MSYS2 for better GTK/GObject support
        Write-Host "Installing MSYS2..."
        choco install -y msys2
        
        # Verify MSYS2 installation
        if (-not (Test-Path "C:	ools\msys64\usr\bin\bash.exe")) {
          Write-Host "ERROR: MSYS2 installation failed!"
          exit 1
        }
        
        # Wait a bit for MSYS2 to settle
        Start-Sleep -Seconds 5
        
        # Update MSYS2 core packages first
        Write-Host "Updating MSYS2 core packages..."
        try {
          & C:	ools\msys64\usr\bin\bash.exe -l -c "pacman -Syu --noconfirm"
        } catch {
          Write-Host "Warning: MSYS2 update had issues, continuing..."
        }
        
        # Install GTK3 and GObject libraries via MSYS2
        Write-Host "Installing GTK3 and GObject libraries..."
        $packages = @(
          "mingw-w64-x86_64-gtk3",
          "mingw-w64-x86_64-gobject-introspection", 
          "mingw-w64-x86_64-cairo",
          "mingw-w64-x86_64-pango",
          "mingw-w64-x86_64-gdk-pixbuf2"
        )
        
        foreach ($package in $packages) {
          Write-Host "Installing $package..."
          try {
            & C:	ools\msys64\usr\bin\bash.exe -l -c "pacman -S --noconfirm $package"
          } catch {
            Write-Host "Warning: Failed to install $package, continuing..."
          }
        }
        
        # Add MSYS2 mingw64 to PATH for the rest of the build
        $env:PATH = "C:	ools\msys64\mingw64\bin;" + $env:PATH
        # Don't use SetEnvironmentVariable as it requires admin privileges
        
        # Verify GObject installation
        if (Test-Path "C:	ools\msys64\mingw64\bin\libgobject-2.0-0.dll") {
          Write-Host "GObject libraries installed successfully"
          Get-ChildItem "C:	ools\msys64\mingw64\bin\libg*.dll" | Select-Object -First 5
        } else {
          Write-Host "Warning: GObject libraries not found"
          # List what's actually available
          if (Test-Path "C:	ools\msys64\mingw64\bin") {
            Write-Host "Available DLL files:"
            Get-ChildItem "C:	ools\msys64\mingw64\bin\*.dll" | Select-Object -First 10
          }
        }

    - name: Install Python dependencies
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        
        # Install build requirements first
        pip install -r requirements-build.txt
        
        # Install core dependencies
        pip install eel>=0.16.0
        pip install pandas>=2.0.0
        pip install pydantic>=2.0.0
        pip install openpyxl>=3.0.0
        
        # Install PyGObject and WeasyPrint with proper GObject support
        Write-Host "Installing PyGObject and WeasyPrint..."
        $env:PATH = "C:\tools\msys64\mingw64\bin;" + $env:PATH
        pip install PyGObject
        pip install weasyprint
        
        # Install OR-Tools (REQUIRED - fail if not available)
        Write-Host "Installing OR-Tools (required dependency)..."
        pip install "ortools>=9.0.0"
        
        # Verify all installations
        python -c "import ortools; print('OR-Tools installed successfully:', ortools.__version__)"
        python -c "import gi; print('PyGObject installed successfully')"
        python -c "import weasyprint; print('WeasyPrint installed successfully')"

    - name: Create necessary directories
      shell: cmd
      run: |
        if not exist data mkdir data
        echo. > data\.gitkeep

    - name: Test imports
      shell: powershell
      run: |
        $env:PATH = "C:\tools\msys64\mingw64\bin;" + $env:PATH
        python -c "import eel; print('Eel imported successfully')"
        python -c "import weasyprint; print('Weasyprint imported successfully')"
        python -c "import pandas; print('Pandas imported successfully')"
        python -c "import openpyxl; print('OpenPyXL imported successfully')"
        python -c "import ortools; print('OR-Tools imported successfully')"
        python -c "import gi; print('PyGObject imported successfully')"
        python -c "from gi.repository import GObject; print('GObject imported successfully')"
        python -c "from seances import Seances; print('Local modules imported successfully')"

    - name: Build with PyInstaller
      shell: cmd
      run: |
        # Add debug information
        echo Python version:
        python --version
        echo Installed packages:
        pip list
        echo.
        echo Directory structure:
        dir /b
        echo.
        
        # Verify required files exist
        if not exist app.py (
          echo ERROR: app.py not found!
          exit /b 1
        )
        if not exist web (
          echo ERROR: web directory not found!
          exit /b 1
        )
        
        # Set PATH to include MSYS2 libraries
        set PATH=C:\tools\msys64\mingw64\bin;%PATH%
        
        # Build with PyInstaller including GObject libraries
        pyinstaller --noconfirm --onefile --windowed ^
          --add-data "web;web" ^
          --add-data "static;static" ^
          --add-data "pdf_generation;pdf_generation" ^
          --add-data "data;data" ^
          --add-binary "C:\tools\msys64\mingw64\bin\libgobject-2.0-0.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libglib-2.0-0.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libgio-2.0-0.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libgmodule-2.0-0.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libgthread-2.0-0.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libcairo-2.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libcairo-gobject-2.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libpango-1.0-0.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libpangocairo-1.0-0.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libgdk_pixbuf-2.0-0.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libharfbuzz-0.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libfontconfig-1.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libfreetype-6.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libffi-8.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libintl-8.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libiconv-2.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\libpcre2-8-0.dll;." ^
          --add-binary "C:\tools\msys64\mingw64\bin\zlib1.dll;." ^
          --hidden-import "eel" ^
          --hidden-import "seances" ^
          --hidden-import "enseignants" ^
          --hidden-import "configuration" ^
          --hidden-import "assignements" ^
          --hidden-import "pdf_generation.surveillance_report" ^
          --hidden-import "ortools.sat.python.cp_model" ^
          --hidden-import "ortools.sat" ^
          --hidden-import "ortools.linear_solver" ^
          --hidden-import "weasyprint" ^
          --hidden-import "weasyprint.css" ^
          --hidden-import "weasyprint.html" ^
          --hidden-import "cffi" ^
          --hidden-import "cairocffi" ^
          --hidden-import "_cffi_backend" ^
          --hidden-import "gi" ^
          --hidden-import "gi.repository" ^
          --hidden-import "gi.repository.GObject" ^
          --hidden-import "gi.repository.Gio" ^
          --hidden-import "gi.repository.GLib" ^
          --hidden-import "openpyxl" ^
          --hidden-import "pandas" ^
          --hidden-import "pydantic" ^
          --collect-all "weasyprint" ^
          --collect-all "eel" ^
          --collect-all "ortools" ^
          --collect-all "cffi" ^
          --collect-all "cairocffi" ^
          --collect-all "gi" ^
          --name "ISIexams-${{ matrix.architecture }}" ^
          --clean app.py

    - name: Verify build output
      shell: powershell
      run: |
        Write-Host "Build completed. Checking output:"
        if (Test-Path "dist\ISIexams-${{ matrix.architecture }}.exe") {
          Write-Host "SUCCESS: Executable created successfully with full OR-Tools support"
          Get-ChildItem "dist\ISIexams-${{ matrix.architecture }}.exe"
        } else {
          Write-Host "ERROR: Executable not found!"
          Write-Host "Contents of dist directory:"
          Get-ChildItem dist
          exit 1
        }

    - name: Create release package
      shell: powershell
      run: |
        # Create release directory
        New-Item -ItemType Directory -Force -Path "release"
        
        # Copy executable to release directory
        Copy-Item "dist\ISIexams-${{ matrix.architecture }}.exe" "release\"
        
        # Copy web directory
        Copy-Item "web" "release\" -Recurse
        
        # Copy static directory
        Copy-Item "static" "release\" -Recurse
        
        # Create README with instructions
        Write-Output "# ISIexams Application" | Out-File -FilePath "release\README.txt" -Encoding utf8
        Write-Output "" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "## How to run:" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "Simply double-click ISIexams-${{ matrix.architecture }}.exe" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "## Contents:" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- ISIexams-${{ matrix.architecture }}.exe: Self-contained application with all dependencies" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- web/: Web interface files" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- static/: Application assets" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "## Features:" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- Complete exam scheduling system" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- Teacher assignment optimization (OR-Tools)" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- PDF report generation (WeasyPrint with embedded GObject libraries)" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- No additional software installation required" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        
        # Create zip file
        Compress-Archive -Path "release\*" -DestinationPath "ISIexams-${{ matrix.architecture }}.zip"
        
        Write-Host "Release package created: ISIexams-${{ matrix.architecture }}.zip"
        Get-ChildItem "ISIexams-${{ matrix.architecture }}.zip"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ISIexams-Windows-${{ matrix.architecture }}
        path: ISIexams-${{ matrix.architecture }}.zip

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ISIexams-${{ matrix.architecture }}.zip
        generate_release_notes: true
        body: |
          ## ISIexams Release - Self-Contained Windows Application
          
          This release contains a fully self-contained Windows application with all dependencies embedded.
          
          ### What's Included:
          - **ISIexams-${{ matrix.architecture }}.exe** - Main application with embedded GTK/GObject libraries
          - **web/** - Complete web interface
          - **static/** - Application assets and images
          
          ### Features:
          - Complete exam scheduling and management system
          - Intelligent teacher assignment optimization (OR-Tools)
          - Professional PDF report generation (WeasyPrint + GObject)
          - **No additional software installation required!**
          
          ### How to Use:
          1. Download and extract the zip file
          2. Double-click ISIexams-${{ matrix.architecture }}.exe
          3. That's it! All dependencies are embedded in the executable.
          
          ### Technical Details:
          - Self-contained executable with embedded GObject/GTK libraries
          - Includes OR-Tools for optimization algorithms  
          - WeasyPrint for PDF generation with full native library support
          - Works on Windows 10/11 without requiring any additional installations
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
