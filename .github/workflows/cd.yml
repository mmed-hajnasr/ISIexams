name: CD # Continuous Deployment

on:
  push:
    tags:
      - "[v]?[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  build:
    name: Build Windows Executables
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10']
        architecture: ['x64']  # Focus on x64 only for better OR-Tools compatibility

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}

    - name: Install system dependencies
      shell: powershell
      run: |
        # Install GTK3 runtime for WeasyPrint
        choco install -y gtk-runtime
        
        # Download and extract GTK3 runtime for distribution
        Invoke-WebRequest -Uri "https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer/releases/download/2022-01-04/gtk3-runtime-3.24.31-2022-01-04-ts-win64.exe" -OutFile "gtk-installer.exe"
        Start-Process -FilePath "gtk-installer.exe" -ArgumentList "/S" -Wait
        
        # Verify GTK installation
        if (Test-Path "C:\Program Files\GTK3-Runtime Win64\bin") {
          Write-Host "GTK3 runtime installed successfully"
        } else {
          Write-Host "Warning: GTK3 runtime not found at expected location"
        }

    - name: Install Python dependencies
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        
        # Install build requirements first
        pip install -r requirements-build.txt
        
        # Install core dependencies
        pip install eel>=0.16.0
        pip install pandas>=2.0.0
        pip install pydantic>=2.0.0
        pip install openpyxl>=3.0.0
        pip install weasyprint
        
        # Install OR-Tools (REQUIRED - fail if not available)
        Write-Host "Installing OR-Tools (required dependency)..."
        pip install "ortools>=9.0.0"
        
        # Verify OR-Tools installation
        python -c "import ortools; print('OR-Tools installed successfully:', ortools.__version__)"

    - name: Create necessary directories
      shell: cmd
      run: |
        if not exist data mkdir data
        echo. > data\.gitkeep

    - name: Test imports
      shell: powershell
      run: |
        python -c "import eel; print('Eel imported successfully')"
        python -c "import weasyprint; print('Weasyprint imported successfully')"
        python -c "import pandas; print('Pandas imported successfully')"
        python -c "import openpyxl; print('OpenPyXL imported successfully')"
        python -c "import ortools; print('OR-Tools imported successfully')"
        python -c "from seances import Seances; print('Local modules imported successfully')"

    - name: Build with PyInstaller
      shell: powershell
      run: |
        # Add debug information
        Write-Host "Python version:"
        python --version
        Write-Host "Installed packages:"
        Write-Host "Installed packages:"
        pip list
        Write-Host ""
        Write-Host "Directory structure:"
        Get-ChildItem
        Write-Host ""
        
        # Verify required files exist
        if (-not (Test-Path "app.py")) {
          Write-Host "ERROR: app.py not found!"
          exit 1
        }
        if (-not (Test-Path "web")) {
          Write-Host "ERROR: web directory not found!"
          exit 1
        }
        
        # Build with PyInstaller including GTK libraries directly
        $gtkPath = ""
        if (Test-Path "C:\Program Files\GTK3-Runtime Win64\bin") {
          $gtkPath = "C:\Program Files\GTK3-Runtime Win64\bin"
        } elseif (Test-Path "C:\GTK\bin") {
          $gtkPath = "C:\GTK\bin"
        }
        
        if ($gtkPath) {
          Write-Host "Using GTK libraries from: $gtkPath"
          # Add GTK bin to PATH for PyInstaller to find libraries
          $env:PATH = "$gtkPath;$env:PATH"
          
          pyinstaller --noconfirm --onefile --windowed `
            --add-data "web;web" `
            --add-data "static;static" `
            --add-data "pdf_generation;pdf_generation" `
            --add-data "data;data" `
            --add-binary "$gtkPath\libgobject-2.0-0.dll;." `
            --add-binary "$gtkPath\libglib-2.0-0.dll;." `
            --add-binary "$gtkPath\libgio-2.0-0.dll;." `
            --add-binary "$gtkPath\libgmodule-2.0-0.dll;." `
            --add-binary "$gtkPath\libgthread-2.0-0.dll;." `
            --add-binary "$gtkPath\libcairo-2.dll;." `
            --add-binary "$gtkPath\libcairo-gobject-2.dll;." `
            --add-binary "$gtkPath\libpango-1.0-0.dll;." `
            --add-binary "$gtkPath\libpangocairo-1.0-0.dll;." `
            --add-binary "$gtkPath\libpangowin32-1.0-0.dll;." `
            --add-binary "$gtkPath\libgdk_pixbuf-2.0-0.dll;." `
            --add-binary "$gtkPath\libharfbuzz-0.dll;." `
            --add-binary "$gtkPath\libfontconfig-1.dll;." `
            --add-binary "$gtkPath\libfreetype-6.dll;." `
            --add-binary "$gtkPath\libffi-6.dll;." `
            --add-binary "$gtkPath\libintl-8.dll;." `
            --add-binary "$gtkPath\libiconv-2.dll;." `
            --add-binary "$gtkPath\libwinpthread-1.dll;." `
            --add-binary "$gtkPath\zlib1.dll;." `
            --add-binary "$gtkPath\libpng16-16.dll;." `
            --add-binary "$gtkPath\libexpat-1.dll;." `
            --add-binary "$gtkPath\libbz2-1.dll;." `
            --hidden-import "eel" `
            --hidden-import "seances" `
            --hidden-import "enseignants" `
            --hidden-import "configuration" `
            --hidden-import "assignements" `
            --hidden-import "pdf_generation.surveillance_report" `
            --hidden-import "ortools.sat.python.cp_model" `
            --hidden-import "ortools.sat" `
            --hidden-import "ortools.linear_solver" `
            --hidden-import "weasyprint" `
            --hidden-import "weasyprint.css" `
            --hidden-import "weasyprint.html" `
            --hidden-import "cffi" `
            --hidden-import "cairocffi" `
            --hidden-import "openpyxl" `
            --hidden-import "pandas" `
            --hidden-import "pydantic" `
            --collect-all "weasyprint" `
            --collect-all "eel" `
            --collect-all "ortools" `
            --name "ISIexams-${{ matrix.architecture }}" `
            --clean app.py
        } else {
          Write-Host "Warning: GTK runtime not found, building without GTK libraries"
          pyinstaller --noconfirm --onefile --windowed `
            --add-data "web;web" `
            --add-data "static;static" `
            --add-data "pdf_generation;pdf_generation" `
            --add-data "data;data" `
            --hidden-import "eel" `
            --hidden-import "seances" `
            --hidden-import "enseignants" `
            --hidden-import "configuration" `
            --hidden-import "assignements" `
            --hidden-import "pdf_generation.surveillance_report" `
            --hidden-import "ortools.sat.python.cp_model" `
            --hidden-import "ortools.sat" `
            --hidden-import "ortools.linear_solver" `
            --hidden-import "weasyprint" `
            --hidden-import "weasyprint.css" `
            --hidden-import "weasyprint.html" `
            --hidden-import "cffi" `
            --hidden-import "cairocffi" `
            --hidden-import "openpyxl" `
            --hidden-import "pandas" `
            --hidden-import "pydantic" `
            --collect-all "weasyprint" `
            --collect-all "eel" `
            --collect-all "ortools" `
            --name "ISIexams-${{ matrix.architecture }}" `
            --clean app.py
        }

    - name: Verify build output
      shell: powershell
      run: |
        Write-Host "Build completed. Checking output:"
        if (Test-Path "dist\ISIexams-${{ matrix.architecture }}.exe") {
          Write-Host "SUCCESS: Executable created successfully with full OR-Tools support"
          Get-ChildItem "dist\ISIexams-${{ matrix.architecture }}.exe"
        } else {
          Write-Host "ERROR: Executable not found!"
          Write-Host "Contents of dist directory:"
          Get-ChildItem dist
          exit 1
        }

    - name: Create release package
      shell: powershell
      run: |
        # Create release directory
        New-Item -ItemType Directory -Force -Path "release"
        
        # Copy executable to release directory
        Copy-Item "dist\ISIexams-${{ matrix.architecture }}.exe" "release\"
        
        # Copy web directory
        Copy-Item "web" "release\" -Recurse
        
        # Copy static directory
        Copy-Item "static" "release\" -Recurse
        
        # Since GTK libraries are now bundled in the executable, we don't need a separate runtime folder
        Write-Host "GTK libraries are bundled directly in the executable"
        
        # Create a simple startup script (optional - executable should work directly)
        Write-Output "@echo off" | Out-File -FilePath "release\ISIexams.bat" -Encoding ascii
        Write-Output "echo Starting ISIexams..." | Out-File -FilePath "release\ISIexams.bat" -Append -Encoding ascii
        Write-Output "`"%~dp0ISIexams-${{ matrix.architecture }}.exe`"" | Out-File -FilePath "release\ISIexams.bat" -Append -Encoding ascii
        
        # Create README with instructions
        Write-Output "# ISIexams Application" | Out-File -FilePath "release\README.txt" -Encoding utf8
        Write-Output "" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "## How to run:" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "1. Extract this zip file to a folder" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "2. Double-click ISIexams-${{ matrix.architecture }}.exe to run the application" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "   (Or use ISIexams.bat if you prefer)" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "## Contents:" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- ISIexams-${{ matrix.architecture }}.exe: Main application (with bundled GTK libraries)" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- ISIexams.bat: Optional startup script" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- web/: Web interface files" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- static/: Application assets" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "## Notes:" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- All GTK libraries for PDF generation are bundled in the executable" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- No additional software installation required" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        
        # Create zip file
        Compress-Archive -Path "release\*" -DestinationPath "ISIexams-${{ matrix.architecture }}.zip"
        
        Write-Host "Release package created: ISIexams-${{ matrix.architecture }}.zip"
        Get-ChildItem "ISIexams-${{ matrix.architecture }}.zip"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ISIexams-Windows-${{ matrix.architecture }}
        path: ISIexams-${{ matrix.architecture }}.zip

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ISIexams-${{ matrix.architecture }}.zip
        generate_release_notes: true
        body: |
          ## ISIexams Release
          
          This release contains a complete, self-contained application:
          - 📱 **ISIexams-${{ matrix.architecture }}.exe** - Main application with bundled GTK libraries
          - 🌐 **web/** - Web interface files
          - 🖼️ **static/** - Static assets (images, etc.)
          
          **Key Features:**
          - ✅ All GTK/GLib libraries bundled for PDF generation (WeasyPrint)
          - ✅ OR-Tools optimization solver included
          - ✅ Complete web interface
          - ✅ No additional software installation required
          
          **How to use:**
          1. Download and extract the zip file
          2. Run `ISIexams-${{ matrix.architecture }}.exe`
          3. The application will start with full PDF generation support
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
