name: CD # Continuous Deployment

on:
  push:
    tags:
      - "[v]?[0-9]+.[0-9]+.[0-9]+"

jobs:
  build:
    name: Build Windows Executables
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10']
        architecture: ['x64']  # Focus on x64 only for better OR-Tools compatibility
        build-type: ['windowed', 'console']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}

    - name: Install system dependencies
      shell: powershell
      run: |
        # Install GTK3 runtime for weasyprint
        choco install -y gtk-runtime

    - name: Install Python dependencies
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        
        # Install build requirements first
        pip install -r requirements-build.txt
        
        # Install core dependencies
        pip install eel>=0.16.0
        pip install pandas>=2.0.0
        pip install pydantic>=2.0.0
        pip install openpyxl>=3.0.0
        pip install weasyprint
        
        # Install OR-Tools (REQUIRED - fail if not available)
        Write-Host "Installing OR-Tools (required dependency)..."
        pip install "ortools>=9.0.0"
        
        # Verify OR-Tools installation
        python -c "import ortools; print('OR-Tools installed successfully:', ortools.__version__)"

    - name: Create necessary directories
      shell: cmd
      run: |
        if not exist data mkdir data
        echo. > data\.gitkeep

    - name: Test imports
      shell: powershell
      run: |
        python -c "import eel; print('Eel imported successfully')"
        python -c "import weasyprint; print('Weasyprint imported successfully')"
        python -c "import pandas; print('Pandas imported successfully')"
        python -c "import openpyxl; print('OpenPyXL imported successfully')"
        python -c "import ortools; print('OR-Tools imported successfully')"
        python -c "from seances import Seances; print('Local modules imported successfully')"

    - name: Build with PyInstaller
      shell: cmd
      run: |
        # Add debug information
        echo Python version:
        python --version
        echo Installed packages:
        pip list
        echo.
        echo Directory structure:
        dir /b
        echo.
        
        # Verify required files exist
        if not exist app.py (
          echo ERROR: app.py not found!
          exit /b 1
        )
        if not exist web (
          echo ERROR: web directory not found!
          exit /b 1
        )
        
        # Build with PyInstaller
        pyinstaller --noconfirm --onefile ${{ matrix.build-type == 'windowed' && '--windowed' || '--console' }} ^
          --add-data "web;web" ^
          --add-data "static;static" ^
          --add-data "pdf_generation;pdf_generation" ^
          --add-data "data;data" ^
          --hidden-import "eel" ^
          --hidden-import "seances" ^
          --hidden-import "enseignants" ^
          --hidden-import "configuration" ^
          --hidden-import "assignements" ^
          --hidden-import "pdf_generation.surveillance_report" ^
          --hidden-import "ortools.sat.python.cp_model" ^
          --hidden-import "ortools.sat" ^
          --hidden-import "ortools.linear_solver" ^
          --hidden-import "weasyprint" ^
          --hidden-import "weasyprint.css" ^
          --hidden-import "weasyprint.html" ^
          --hidden-import "cffi" ^
          --hidden-import "cairocffi" ^
          --hidden-import "openpyxl" ^
          --hidden-import "pandas" ^
          --hidden-import "pydantic" ^
          --collect-all "weasyprint" ^
          --collect-all "eel" ^
          --collect-all "ortools" ^
          --name "ISIexams-${{ matrix.architecture }}-${{ matrix.build-type }}" ^
          --clean app.py

    - name: Verify build output
      shell: powershell
      run: |
        Write-Host "Build completed. Checking output:"
        if (Test-Path "dist\ISIexams-${{ matrix.architecture }}-${{ matrix.build-type }}.exe") {
          Write-Host "SUCCESS: Executable created successfully with full OR-Tools support"
          Get-ChildItem "dist\ISIexams-${{ matrix.architecture }}-${{ matrix.build-type }}.exe"
        } else {
          Write-Host "ERROR: Executable not found!"
          Write-Host "Contents of dist directory:"
          Get-ChildItem dist
          exit 1
        }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ISIexams-Windows-${{ matrix.architecture }}-${{ matrix.build-type }}
        path: dist/ISIexams-${{ matrix.architecture }}-${{ matrix.build-type }}.exe

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/ISIexams-${{ matrix.architecture }}-${{ matrix.build-type }}.exe
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
