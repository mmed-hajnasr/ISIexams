name: CD # Continuous Deployment

on:
  push:
    tags:
      - "[v]?[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  build:
    name: Build Windows Executables
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10']
        architecture: ['x64']  # Focus on x64 only for better OR-Tools compatibility

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}

    - name: Install system dependencies
      shell: powershell
      run: |
        # Install GTK3 runtime for WeasyPrint
        choco install -y gtk-runtime
        
        # Download and extract GTK3 runtime for distribution
        Invoke-WebRequest -Uri "https://github.com/tschoonj/GTK-for-Windows-Runtime-Environment-Installer/releases/download/2022-01-04/gtk3-runtime-3.24.31-2022-01-04-ts-win64.exe" -OutFile "gtk-installer.exe"
        Start-Process -FilePath "gtk-installer.exe" -ArgumentList "/S" -Wait
        
        # Verify GTK installation
        if (Test-Path "C:\Program Files\GTK3-Runtime Win64\bin") {
          Write-Host "GTK3 runtime installed successfully"
        } else {
          Write-Host "Warning: GTK3 runtime not found at expected location"
        }

    - name: Install Python dependencies
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        
        # Install build requirements first
        pip install -r requirements-build.txt
        
        # Install core dependencies
        pip install eel>=0.16.0
        pip install pandas>=2.0.0
        pip install pydantic>=2.0.0
        pip install openpyxl>=3.0.0
        pip install weasyprint
        
        # Install OR-Tools (REQUIRED - fail if not available)
        Write-Host "Installing OR-Tools (required dependency)..."
        pip install "ortools>=9.0.0"
        
        # Verify OR-Tools installation
        python -c "import ortools; print('OR-Tools installed successfully:', ortools.__version__)"

    - name: Create necessary directories
      shell: cmd
      run: |
        if not exist data mkdir data
        echo. > data\.gitkeep

    - name: Test imports
      shell: powershell
      run: |
        python -c "import eel; print('Eel imported successfully')"
        python -c "import weasyprint; print('Weasyprint imported successfully')"
        python -c "import pandas; print('Pandas imported successfully')"
        python -c "import openpyxl; print('OpenPyXL imported successfully')"
        python -c "import ortools; print('OR-Tools imported successfully')"
        python -c "from seances import Seances; print('Local modules imported successfully')"

    - name: Build with PyInstaller
      shell: cmd
      run: |
        # Add debug information
        echo Python version:
        python --version
        echo Installed packages:
        pip list
        echo.
        echo Directory structure:
        dir /b
        echo.
        
        # Verify required files exist
        if not exist app.py (
          echo ERROR: app.py not found!
          exit /b 1
        )
        if not exist web (
          echo ERROR: web directory not found!
          exit /b 1
        )
        
        # Build with PyInstaller (simpler approach - include GTK runtime separately)
        pyinstaller --noconfirm --onefile --windowed ^
          --add-data "web;web" ^
          --add-data "static;static" ^
          --add-data "pdf_generation;pdf_generation" ^
          --add-data "data;data" ^
          --hidden-import "eel" ^
          --hidden-import "seances" ^
          --hidden-import "enseignants" ^
          --hidden-import "configuration" ^
          --hidden-import "assignements" ^
          --hidden-import "pdf_generation.surveillance_report" ^
          --hidden-import "ortools.sat.python.cp_model" ^
          --hidden-import "ortools.sat" ^
          --hidden-import "ortools.linear_solver" ^
          --hidden-import "weasyprint" ^
          --hidden-import "weasyprint.css" ^
          --hidden-import "weasyprint.html" ^
          --hidden-import "cffi" ^
          --hidden-import "cairocffi" ^
          --hidden-import "openpyxl" ^
          --hidden-import "pandas" ^
          --hidden-import "pydantic" ^
          --collect-all "weasyprint" ^
          --collect-all "eel" ^
          --collect-all "ortools" ^
          --name "ISIexams-${{ matrix.architecture }}" ^
          --clean app.py

    - name: Verify build output
      shell: powershell
      run: |
        Write-Host "Build completed. Checking output:"
        if (Test-Path "dist\ISIexams-${{ matrix.architecture }}.exe") {
          Write-Host "SUCCESS: Executable created successfully with full OR-Tools support"
          Get-ChildItem "dist\ISIexams-${{ matrix.architecture }}.exe"
        } else {
          Write-Host "ERROR: Executable not found!"
          Write-Host "Contents of dist directory:"
          Get-ChildItem dist
          exit 1
        }

    - name: Create release package
      shell: powershell
      run: |
        # Create release directory
        New-Item -ItemType Directory -Force -Path "release"
        
        # Copy executable to release directory
        Copy-Item "dist\ISIexams-${{ matrix.architecture }}.exe" "release\"
        
        # Copy web directory
        Copy-Item "web" "release\" -Recurse
        
        # Copy static directory
        Copy-Item "static" "release\" -Recurse
        
        # Copy GTK3 runtime for WeasyPrint support
        if (Test-Path "C:\Program Files\GTK3-Runtime Win64") {
          Write-Host "Including GTK3 runtime for WeasyPrint support..."
          New-Item -ItemType Directory -Force -Path "release\gtk3-runtime"
          Copy-Item "C:\Program Files\GTK3-Runtime Win64\*" "release\gtk3-runtime\" -Recurse -ErrorAction SilentlyContinue
        } elseif (Test-Path "C:\GTK") {
          Write-Host "Including GTK runtime from C:\GTK..."
          New-Item -ItemType Directory -Force -Path "release\gtk3-runtime"
          Copy-Item "C:\GTK\*" "release\gtk3-runtime\" -Recurse -ErrorAction SilentlyContinue
        } else {
          Write-Host "Warning: GTK runtime not found - PDF generation may not work"
        }
        
        # Create a startup script that sets up GTK environment
        Write-Output "@echo off" | Out-File -FilePath "release\ISIexams.bat" -Encoding ascii
        Write-Output "set GTK_PATH=%~dp0gtk3-runtime" | Out-File -FilePath "release\ISIexams.bat" -Append -Encoding ascii
        Write-Output "set PATH=%GTK_PATH%\bin;%PATH%" | Out-File -FilePath "release\ISIexams.bat" -Append -Encoding ascii
        Write-Output "set GI_TYPELIB_PATH=%GTK_PATH%\lib\girepository-1.0" | Out-File -FilePath "release\ISIexams.bat" -Append -Encoding ascii
        Write-Output "set GDK_PIXBUF_MODULE_FILE=%GTK_PATH%\lib\gdk-pixbuf-2.0\2.10.0\loaders.cache" | Out-File -FilePath "release\ISIexams.bat" -Append -Encoding ascii
        Write-Output "echo Starting ISIexams..." | Out-File -FilePath "release\ISIexams.bat" -Append -Encoding ascii
        Write-Output "echo GTK Runtime: %GTK_PATH%" | Out-File -FilePath "release\ISIexams.bat" -Append -Encoding ascii
        Write-Output "`"%~dp0ISIexams-${{ matrix.architecture }}.exe`"" | Out-File -FilePath "release\ISIexams.bat" -Append -Encoding ascii
        
        # Create README with instructions
        Write-Output "# ISIexams Application" | Out-File -FilePath "release\README.txt" -Encoding utf8
        Write-Output "" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "## How to run:" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "1. Extract this zip file to a folder" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "2. Run ISIexams.bat (recommended - sets up GTK for PDF generation)" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "   OR double-click ISIexams-${{ matrix.architecture }}.exe directly" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "## Contents:" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- ISIexams-${{ matrix.architecture }}.exe: Main application" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- ISIexams.bat: Startup script with GTK environment" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- web/: Web interface files" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- static/: Application assets" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        Write-Output "- gtk3-runtime/: GTK libraries for PDF generation" | Out-File -FilePath "release\README.txt" -Append -Encoding utf8
        
        # Create zip file
        Compress-Archive -Path "release\*" -DestinationPath "ISIexams-${{ matrix.architecture }}.zip"
        
        Write-Host "Release package created: ISIexams-${{ matrix.architecture }}.zip"
        Get-ChildItem "ISIexams-${{ matrix.architecture }}.zip"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ISIexams-Windows-${{ matrix.architecture }}
        path: ISIexams-${{ matrix.architecture }}.zip

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ISIexams-${{ matrix.architecture }}.zip
        generate_release_notes: true
        body: |
          ## ISIexams Release
          
          This release contains:
          - **ISIexams-${{ matrix.architecture }}.exe** - The main application executable
          - **web/** - Web interface files
          - **static/** - Static assets (images, etc.)
          
          Simply extract the zip file and run the executable to start the application.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
